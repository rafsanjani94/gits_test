// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	time "time"

	user "gits/test3/models/user"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// GetById provides a mock function with given fields: userId
func (_m *UserRepository) GetById(userId float64) (*user.User, error) {
	ret := _m.Called(userId)

	var r0 *user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(float64) (*user.User, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(float64) *user.User); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	// if rf, ok := ret.Get(1).(func(float64) error); ok {
	// 	r1 = rf(userId)
	// } else {
	// 	r1 = ret.Error(1)
	// }

	return r0, r1
}

// Login provides a mock function with given fields: username, password
func (_m *UserRepository) Login(username string, password string) user.User {
	ret := _m.Called(username, password)

	var r0 user.User
	if rf, ok := ret.Get(0).(func(string, string) user.User); ok {
		r0 = rf(username, password)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	return r0
}

// SetLogin provides a mock function with given fields: userId, loginData, exp
func (_m *UserRepository) SetLogin(userId string, loginData []byte, exp time.Duration) error {
	ret := _m.Called(userId, loginData, exp)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte, time.Duration) error); ok {
		r0 = rf(userId, loginData, exp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepository(t mockConstructorTestingTNewUserRepository) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
