// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	book "gits/test3/models/book"

	mock "github.com/stretchr/testify/mock"
)

// BookRepository is an autogenerated mock type for the BookRepository type
type BookRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *BookRepository) Create(_a0 book.Book) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(book.Book) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: _a0
func (_m *BookRepository) Delete(_a0 book.Book) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(book.Book) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetById provides a mock function with given fields: id
func (_m *BookRepository) GetById(id string) book.Book {
	ret := _m.Called(id)

	var r0 book.Book
	if rf, ok := ret.Get(0).(func(string) book.Book); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(book.Book)
	}

	return r0
}

// List provides a mock function with given fields: authorId
func (_m *BookRepository) List(authorId int) []book.Book {
	ret := _m.Called(authorId)

	var r0 []book.Book
	if rf, ok := ret.Get(0).(func(int) []book.Book); ok {
		r0 = rf(authorId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]book.Book)
		}
	}

	return r0
}

// ListAll provides a mock function with given fields:
func (_m *BookRepository) ListAll() []book.Book {
	ret := _m.Called()

	var r0 []book.Book
	if rf, ok := ret.Get(0).(func() []book.Book); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]book.Book)
		}
	}

	return r0
}

// Update provides a mock function with given fields: _a0
func (_m *BookRepository) Update(_a0 book.Book) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(book.Book) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewBookRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewBookRepository creates a new instance of BookRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBookRepository(t mockConstructorTestingTNewBookRepository) *BookRepository {
	mock := &BookRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
